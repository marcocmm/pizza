package com.example.accessingdatamysql;

import java.util.Iterator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController    // This means that this class is a Controller
@RequestMapping(path = "/uds") // This means URL's start with /demo (after Application path)
public class MainController {

    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired // This means to get the bean called userRepository
    private UserRepository userRepository;
    @Autowired // This means to get the bean called userRepository
    private TamanhoRepository tamanhoRepository;
    @Autowired // This means to get the bean called userRepository
    private ExtraRepository extraRepository;
    @Autowired // This means to get the bean called userRepository
    private SaborRepository saborRepository;
    @Autowired // This means to get the bean called userRepository
    private PizzaRepository pizzaRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name,
            @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/alltamanhos")
    public @ResponseBody
    Iterable<Tamanho> getAllTamanhos() {
        // This returns a JSON or XML with the users
        return tamanhoRepository.findAll();
    }

    @GetMapping(path = "/allsabores")
    public @ResponseBody
    Iterable<Sabor> getAllSabores() {
        // This returns a JSON or XML with the users
        return saborRepository.findAll();
    }

    @GetMapping(path = "/allextras")
    public @ResponseBody
    Iterable<Extra> getAllExtras() {
        // This returns a JSON or XML with the users
        return extraRepository.findAll();
    }

    @GetMapping(path = "/allpizzas")
    public @ResponseBody
    Iterable<Pizza> getAllPizza() {
        // This returns a JSON or XML with the users
        return pizzaRepository.findAll();
    }

    @GetMapping("/calcularPizza")
    Pizza calculaPizza(@RequestBody Pizza pizza) {
        Iterable<Sabor> sabores = saborRepository.findAll();
        Iterable<Extra> extras = extraRepository.findAll();
        Iterable<Tamanho> tamanhos = tamanhoRepository.findAll();
     
        for (Iterator iterator = (Iterator) sabores; iterator.hasNext();) {
            Sabor sabor = (Sabor) iterator.next();
            if (sabor.getId_sabor() == pizza.getSabor().getId_sabor()) {
                
            }
        }

        return pizza;
    }

    @PostMapping("/gravarPizza")
    Pizza gravarPizza(@RequestBody Pizza pizza) {
        Pizza p = new Pizza();
        if (validaPizza(pizza)) {
            p = pizzaRepository.save(pizza);
        }
        return p;
    }

    private boolean validaPizza(Pizza pizza) {
        try {
            if (pizza.getSabor() == null) {
                return false;
            } else if (pizza.getSabor().getId_sabor() == null || pizza.getSabor().getDescricao().equals("")) {
                return false;
            }
            if (pizza.getTamanho() == null) {
                return false;
            } else if (pizza.getTamanho().getId_tamanho() == null || pizza.getTamanho().getDescricao().equals("") || pizza.getTamanho().getValor() <= 0 || pizza.getTamanho().getTempo() <= 0) {
                return false;
            }
        } catch (Exception e) {
            System.out.println(e);
            return false;
        }
        return true;
    }
}
